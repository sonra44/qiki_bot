import os
import json
import time
import datetime

# --- CONFIGURATION ---
TELEMETRY_FILE = "telemetry.json"

# ANSI color codes
COLOR_RED = "\033[91m"
COLOR_GREEN = "\033[92m"
COLOR_YELLOW = "\033[93m"
COLOR_RESET = "\033[0m"

# --- HELPER FUNCTIONS ---

def clear_screen():
    """Clears the terminal screen."""
    os.system('cls' if os.name == 'nt' else 'clear')

def read_data(filepath: str) -> (dict, float, str):
    """
    Safely reads a JSON file.
    Returns: (data_dict, last_modified_timestamp, error_string)
    """
    if not os.path.exists(filepath):
        return {}, 0, f"‚ö†Ô∏è  {os.path.basename(filepath)} not found"
    try:
        last_mod_time = os.path.getmtime(filepath)
        with open(filepath, 'r') as f:
            content = f.read()
            if not content.strip():
                return {}, last_mod_time, f"‚ö†Ô∏è  {os.path.basename(filepath)} is empty"
            data = json.loads(content)
            return data, last_mod_time, ""
    except (json.JSONDecodeError, IOError) as e:
        return {}, 0, f"‚ö†Ô∏è  Error reading {os.path.basename(filepath)}"

def format_value(value, unit="", precision=2, missing_msg="N/A"):
    """Formats a numerical value or returns a missing message."""
    if value is None:
        return missing_msg
    if isinstance(value, bool):
        return f"{COLOR_GREEN}‚úÖ YES{COLOR_RESET}" if value else "‚ùå NO"
    return f"{value:>{precision}.{precision}f}{unit}"

# --- MAIN DISPLAY FUNCTION ---

def display_power_hud():
    """Renders and displays the power core HUD."""
    telemetry, tele_mod, tele_err = read_data(TELEMETRY_FILE)

    # --- Data Extraction & Processing ---
    battery_percent = telemetry.get("battery_percent")
    power_wh = telemetry.get("power_wh")
    consumption_w = telemetry.get("consumption_w")
    speed_mps = telemetry.get("speed_mps")
    velocity = telemetry.get("velocity")
    acceleration = telemetry.get("acceleration")
    impulse_active = telemetry.get("impulse_active")

    # Placeholder for voltage/current (not in telemetry.json, but requested)
    battery_voltage = 14.8 # Example static value
    battery_current = 3.2  # Example static value
    battery_health = "‚úÖ GOOD"

    # Calculate efficiency (example: power_out / power_in)
    # This is a placeholder as we don't have power_in/out in telemetry.json
    efficiency = 88.2 # Example static value

    # --- UI Assembly ---
    hud_lines = []
    width = 80

    hud_lines.append("‚ïî" + "‚ïê" * (width - 2) + "‚ïó")
    hud_lines.append("‚ïë" + " QIKI BOT - POWER CORE / –≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–û–ï –Ø–î–†–û ".center(width - 2) + "‚ïë")
    hud_lines.append("‚ïö" + "‚ïê" * (width - 2) + "‚ïù")

    # Section: Battery Status
    hud_lines.append("‚îå‚îÄ üîã BATTERY STATUS / –°–û–°–¢–û–Ø–ù–ò–ï –ë–ê–¢–ê–†–ï–ò ‚îÄ" + "‚îÄ" * 33 + "‚îê")
    charge_line = f"  Charge / –ó–∞—Ä—è–¥: {format_value(battery_percent, '%')}"
    if battery_percent is not None and battery_percent < 15:
        charge_line += f" {COLOR_RED}‚ö†Ô∏è LOW BATTERY / –ù–ò–ó–ö–ò–ô –ó–ê–†–Ø–î –ë–ê–¢–ê–†–ï–ò{COLOR_RESET}"
    hud_lines.append(f"‚îÇ {charge_line.ljust(width - 4)} ‚îÇ")

    hud_lines.append(f"‚îÇ Power / –ú–æ—â–Ω–æ—Å—Ç—å: {format_value(power_wh, ' Wh').ljust(width - 20)} ‚îÇ")
    hud_lines.append(f"‚îÇ Voltage / –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {format_value(battery_voltage, ' V').ljust(width - 24)} ‚îÇ")
    hud_lines.append(f"‚îÇ Current / –¢–æ–∫: {format_value(battery_current, ' A').ljust(width - 18)} ‚îÇ")
    hud_lines.append(f"‚îÇ Health / –ó–¥–æ—Ä–æ–≤—å–µ: {battery_health.ljust(width - 20)} ‚îÇ")
    hud_lines.append("‚îú‚îÄ" + "‚îÄ" * (width - 2) + "‚î§")

    # Section: Power Flow
    hud_lines.append("‚îÇ ‚ö° POWER FLOW / –ü–û–¢–û–ö –≠–ù–ï–†–ì–ò–ò ‚îÄ" + "‚îÄ" * 44 + "‚îÇ")
    hud_lines.append(f"‚îÇ Consumption / –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {format_value(consumption_w, ' W').ljust(width - 28)} ‚îÇ")
    hud_lines.append(f"‚îÇ Efficiency / –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {format_value(efficiency, ' %').ljust(width - 30)} ‚îÇ")
    hud_lines.append(f"‚îÇ Acceleration / –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {format_value(acceleration, ' m/s¬≤').ljust(width - 28)} ‚îÇ")
    hud_lines.append(f"‚îÇ Speed / –°–∫–æ—Ä–æ—Å—Ç—å: {format_value(speed_mps, ' m/s').ljust(width - 20)} ‚îÇ")
    hud_lines.append("‚îú‚îÄ" + "‚îÄ" * (width - 2) + "‚î§")

    # Section: Impulse & Drive
    hud_lines.append("‚îÇ üöÄ IMPULSE & DRIVE / –ò–ú–ü–£–õ–¨–° –ò –ü–†–ò–í–û–î ‚îÄ" + "‚îÄ" * 36 + "‚îÇ")
    impulse_status = format_value(impulse_active, missing_msg="N/A")
    hud_lines.append(f"‚îÇ Impulse Active / –ò–º–ø—É–ª—å—Å –∞–∫—Ç–∏–≤–µ–Ω: {impulse_status.ljust(width - 35)} ‚îÇ")
    hud_lines.append(f"‚îÇ Velocity / –°–∫–æ—Ä–æ—Å—Ç—å: {format_value(velocity, ' m/s').ljust(width - 22)} ‚îÇ")
    hud_lines.append(f"‚îÇ Kinetic Mode / –†–µ–∂–∏–º –¥–≤–∏–∂–µ–Ω–∏—è: {'CRUISE'.ljust(width - 30)} ‚îÇ") # Static for now
    hud_lines.append("‚îî" + "‚îÄ" * (width - 2) + "‚îò")

    # Footer
    hud_lines.append(f"\nLocal Time / –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {datetime.datetime.now().strftime("%H:%M:%S")}")
    hud_lines.append(f"Last Telemetry Update / –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.datetime.fromtimestamp(tele_mod).strftime("%H:%M:%S") if tele_mod else "N/A"}")
    if tele_err: hud_lines.append(f"{COLOR_RED}{tele_err}{COLOR_RESET}")
    hud_lines.append("Press Ctrl+C to exit / –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

    clear_screen()
    print("\n".join(hud_lines))

# --- MAIN EXECUTION LOOP ---
if __name__ == "__main__":
    try:
        while True:
            display_power_hud()
            time.sleep(2)
    except KeyboardInterrupt:
        clear_screen()
        print("Power Core HUD terminated by user.")